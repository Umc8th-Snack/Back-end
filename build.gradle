plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'umc'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mockito:mockito-inline:5.2.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    runtimeOnly 'com.mysql:mysql-connector-j:8.0.33'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

	// jwt 0.12.6
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	//jsoup
	implementation 'org.jsoup:jsoup:1.16.1'

	// AWS S3
	implementation 'software.amazon.awssdk:s3:2.28.15'
	implementation 'software.amazon.awssdk:auth:2.28.15'

	// 스프링 캐시 표준 기능
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	// 카페인 캐시 엔진
	implementation 'com.github.ben-manes.caffeine:caffeine'
	// 캐시 모니터링 액츄에이터
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// 이메일에 코드 전송
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// CI용 가짜 db
	testImplementation 'com.h2database:h2'

}

tasks.named('test') {
	useJUnitPlatform {
		excludeTags 'live'
	}
	if (System.getenv('GITHUB_ACTIONS') == 'true' || System.getenv('CI') == 'true') {
		systemProperty 'spring.profiles.active', 'test'
	} else {
	}
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
		showStandardStreams = false
	}
}

tasks.register('crawlQuality', Test) {
	description = 'Run only CrawlQualityTest with @Tag("live") on test profile'
	group = 'verification'

	useJUnitPlatform {
		includeTags 'live'
	}

	filter {
		includeTestsMatching 'umc.snack.crawler.CrawlQualityTest'
		// 실패해도 필터링된 다른 테스트는 없음
		isFailOnNoMatchingTests = true
	}

	systemProperty 'spring.profiles.active', 'test'

	systemProperty 'crawl.sample', System.getProperty('crawl.sample', '200')
	systemProperty 'crawl.maxNullPercent', System.getProperty('crawl.maxNullPercent', '20')

	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
		showStandardStreams = true
	}

}