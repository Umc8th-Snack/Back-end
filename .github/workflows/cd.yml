name: CD

on:  
  push:
    branches: [ main ]

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ROLE_ARN: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      SHA: ${{ github.sha }}
      SPRING_REPO: spring
      PY_REPO: python
      ENV_TAG: prod-latest
      KEEP_N: "5"
      EXTRA_PROTECT: ""
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - name: Build spring
        run: |
          URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${SPRING_REPO}
          docker build -t ${URI}:${SHA} -t ${URI}:${ENV_TAG} .

      - name: Build python
        run: |
          URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PY_REPO}
          docker build -t ${URI}:${SHA} -t ${URI}:${ENV_TAG} ./python-nlp-service

      - name: Push spring
        run: |
          URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${SPRING_REPO}
          docker push ${URI}:${SHA}
          docker push ${URI}:${ENV_TAG}

      - name: Push python
        run: |
          URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PY_REPO}
          docker push ${URI}:${SHA}
          docker push ${URI}:${ENV_TAG}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Prune ECR (keep prod/staging-latest + recent SHAs)
        env:
          REGION: ${{ env.AWS_REGION }}
          KEEP_N: ${{ env.KEEP_N }}
          EXTRA_PROTECT: ${{ env.EXTRA_PROTECT }}
        run: |
          set -euo pipefail
          for REPO in spring python; do
            DETAILS=$(aws ecr describe-images --repository-name "$REPO" --region "$REGION" \
              --query 'reverse(sort_by(imageDetails,& imagePushedAt))' --output json)
            PROTECT_TAGS='["prod-latest","staging-latest"]'
            RECENT_SHAS=$(echo "$DETAILS" | jq -r --argjson N "$KEEP_N" '
              [ .[] | {tags:(.imageTags // [])} | .tags[] | select(test("^[0-9a-fA-F]{7,40}$")) ][0:$N]')
            if [ -n "$EXTRA_PROTECT" ]; then
              EXTRA_JSON=$(printf '%s' "$EXTRA_PROTECT" | awk -F, '{
                printf("["); for(i=1;i<=NF;i++){ gsub(/^ +| +$/,"",$i); printf("%s\"%s\"", (i>1?",":""), $i) } printf("]")
              }')
            else
              EXTRA_JSON='[]'
            fi
            ALL_PROTECT=$(jq -c -n --argjson a "$PROTECT_TAGS" --argjson b "$RECENT_SHAS" --argjson c "$EXTRA_JSON" '(a+b+c)|unique')
            DELETE_LIST=$(echo "$DETAILS" | jq -c --argjson KEEP "$ALL_PROTECT" '
              [ .[] as $img
                | ($img.imageTags // []) as $tags
                | if ($tags|length)==0 then {imageDigest:$img.imageDigest}
                  else if [ $tags[] | select(. as $t | $KEEP | index($t)) ] | length > 0
                       then empty
                       else {imageDigest:$img.imageDigest}
                       end
                  end ]')
            if [ "$(echo "$DELETE_LIST" | jq 'length')" -gt 0 ]; then
              echo "$DELETE_LIST" > /tmp/delete.json
              aws ecr batch-delete-image --repository-name "$REPO" --region "$REGION" --image-ids file:///tmp/delete.json || true
            else
              echo "Nothing to delete in $REPO"
            fi
          done

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    env:
      REMOTE_DIR: /home/ubuntu/Back-end
      ENV_TAG: prod-latest
    steps:
      - name: SSH & deploy (prod)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST_STG }}   # 서버 한 대면 여기 사용
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -e
            cd "${{ env.REMOTE_DIR }}"
            AWS_REGION="${{ secrets.AWS_REGION }}"
            AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
            TAG="${{ env.ENV_TAG }}"

            # awscli 없으면 설치 (최초 1회 대비)
            if ! command -v aws >/dev/null 2>&1; then
              sudo apt update && sudo apt install -y unzip curl
              ARCH=$(uname -m)
              if [ "$ARCH" = "x86_64" ]; then URL="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"; else URL="https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip"; fi
              curl -fsSL "$URL" -o awscliv2.zip
              unzip -q awscliv2.zip
              sudo ./aws/install
              aws --version
            fi

            aws ecr get-login-password --region "$AWS_REGION" \
              | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"

            # 배포 변수 파일 업데이트 (spring + python 둘 다)
            touch .deploy.env
            grep -q '^AWS_ACCOUNT_ID=' .deploy.env || echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> .deploy.env
            grep -q '^AWS_REGION=' .deploy.env || echo "AWS_REGION=$AWS_REGION" >> .deploy.env
            if grep -q '^IMAGE_TAG=' .deploy.env; then sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=$TAG/" .deploy.env; else echo "IMAGE_TAG=$TAG" >> .deploy.env; fi
            if grep -q '^PYTHON_IMAGE_TAG=' .deploy.env; then sed -i "s/^PYTHON_IMAGE_TAG=.*/PYTHON_IMAGE_TAG=$TAG/" .deploy.env; else echo "PYTHON_IMAGE_TAG=$TAG" >> .deploy.env; fi

            docker compose --env-file .deploy.env pull
            docker compose --env-file .deploy.env up -d
            docker image prune -f
